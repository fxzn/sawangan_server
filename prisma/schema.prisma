// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                      String        @id @default(uuid())
  fullName                String?
  email                   String        @unique
  phone                   String?
  password                String?       // Diubah jadi optional untuk social login
  avatar                  String?       // Tambahkan field baru
  token                   String?
  role                    Role          @default(USER)
  resetPasswordToken      String?
  resetPasswordExpire     DateTime?
  provider                Provider      @default(LOCAL)
  isVerified              Boolean       @default(false)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  products                Product[]
  carts                   Cart[]
  orders                  Order[]
}

enum Role {
  USER
  ADMIN
}


enum Provider {
  LOCAL    // Untuk registrasi manual
  GOOGLE   // Untuk login Google
}


model Product {
  id              String              @id @default(uuid())
  name            String
  price           Float
  description     String
  imageUrl        String
  category        Category
  weight          Float                 // bentuk dalam kg
  stock           Int
  expiryDate      DateTime?           // nullable untuk non-makanan/minuman
  createdAt       DateTime            @default(now())
  addedBy         User?               @relation(fields: [addedById], references: [id])
  addedById       String?             // optional jika tidak semua produk punya admin
  cartItems       CartItem[]
  orderItems      OrderItem[]

}


enum Category {
  Makanan    
  Minuman
  Aksesoris
}


model Cart {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId])
}


model CartItem {
  id            String      @id @default(uuid())
  cartId        String
  cart          Cart        @relation(fields: [cartId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([cartId, productId])
}


model Order {
  id                  String        @id @default(uuid())
  userId              String
  user                User          @relation(fields: [userId], references: [id])
  items               OrderItem[]
  status              OrderStatus   @default(PENDING)
  totalAmount         Float
  customerName        String?
  customerEmail       String?
  customerPhone       String?
  shippingAddress     String
  shippingCity        String
  shippingProvince    String
  shippingPostCode    String
  shippingCost        Float
  shipping_name       String  
  service_name        String  
  paymentMethod       String     
  estimatedDelivery   String?
  createdAt           DateTime      @default(now())

  @@index([userId])
}

model OrderItem {
  id            String    @id @default(uuid())
  orderId       String
  order         Order     @relation(fields: [orderId], references: [id])
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int
  price         Float     // Harga saat checkout (snapshot)
}

enum OrderStatus {
  PENDING
  PACKAGED
  SHIPPED
  COMPLETED
  CANCELLED
}
